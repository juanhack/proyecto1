Mensaje Secreto
adicion al mensaje Secreto
todo lo que debes saber

git init - Es para iniciar el programa
pwd - permite saber la ruta del directorio en el que me encuentro
clear - para limpiar la consola
mkdir - Crear directorio
touch - me permite crear un archivo vacio
History - me permite ver el historial de comandos
!(numero del history) - este comando me permite ejecutar el comando del History segun el numero que se coloque
git add - Comnado para adicionar un documento a la rama // git add . - comando ara adicionar todos los documentos que se hubieran creado/actualizado dentro de un mismo directorio o rama
git commit -m - Esto carga definitivamente el documento a la rama correspondiente en el servidor... y crea una nueva versión
git config --global user.name "Juan Ospina" - comando para configurar el nombre de la persona que esta haciendo la actualización
git config --global user.email "silohe6@gmail.com" - comando para configurar el correo electronico de la persona que esta haciendo la actualización
git config - list - comando para revisar la configuración actual de github
git show (nombre del archivo) - muestra la el ultimo commit que se hubiera realizado y el estado anterior y los ajustes nuevos que tenga dicho documento
git restore <file> - sirve para retornar un documento a la version anterior del mismo. // git restore --staged <file> - comando para retornar un archivo despues de haberle dado ADD, esto con el fin de que no suba como un commit
git status - permite ver el estado actual de un fichero (a que rama pertenece, que archivos estan pendientes por adicionar, que archivos estan pendientes por commit y que archivos tienen modificaciones)
git log <file> - comando para mostrar los commits que ha tenido el achivo y cada uno de los mensajes que se envian con estos
git diff <numero de commit que quiero comparar> <numero de commit contra el que comparar>
[ADVERTENCIA - ESTO RETORNA Y BORRA ABSOLUTAMENTE TODA LA EVIDENCIA ANTERIOR] git reset <numero del commit al que quiero regresar> (--hard, retorna absolutamente todo a esa version y elimina cualquier rastro// --soft, retorna a la version solicitada sin embargo lo que se tenga en el limbo de ADD no se elimnina)
git log --stat - comnado para ver cada uno de los commits que se han hecho, con la claridad de cuantos bits y que archivos y directorios se han cargado al repositorio.
git rm - Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión. (git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.//git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados)
git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
git commit -am : crean un commit de los cambios realizados en los archivos que previamente ya hubieran sido subidos con ADD por lo menos una ves, quitando de por medio tener que estar haciendo muchos ADDS

git branch <nombre rama> : crea una nueva rama o linea de trabajo paralela
git checkout <nombre rama> : comando para moverse entre ramas

git merge <nombre ramainvocada>: este comando se utiliza para fusionar dos ramas, sin embargo es importante aclarar que desde la rama desde la cual se invoca es la que queda como rama principal y trae y fusiona todos los cambios nuevos ocurridos en el utlimo commit de la rama que se invoca.
